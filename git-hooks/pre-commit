#!/usr/bin/env python
# Copyright (c) Metaswitch Networks 2010-2012. All rights reserved.
"""
A pre-commit hook for git that checks files for copyright statements.
 
This script must be located at ``$REPO/.git/hooks/pre-commit`` and be
executable.
"""
import os
import re
import sys
import datetime

from subprocess import Popen, PIPE, call

THIS_YEAR = datetime.datetime.now().year
FILENAME_RE = re.compile(r'^.*(\.(c|py|sh|java)|pre-commit)$')
COPYRIGHT_RE = re.compile(r'Copyright \(c\) Metaswitch Networks [-,0-9]+%s. +All rights reserved.' % THIS_YEAR)
FORBIDDEN_RES = (
  (r"\t", "contains tabs:"),
  (r"NO.?COMMIT", "contains explicit NO_" "COMMIT comment marker:"),
  (r"DEBUG\s*=\s*[tT]rue", "contains DEBUG = " "true; was that intentional?"),
)
FORBIDDEN_RE = re.compile("|".join([snippet for snippet, _ in FORBIDDEN_RES]))

def main():
    run_tests()
    check_copyright()

def run_tests():
    rc = call(["make", "test"])
    if rc != 0:
        print "*****************************************"
        print "***** Commit rejected: tests failed *****"
        print "*****************************************"
        print "(Use 'git commit --no-verify' to bypass this check)"
        sys.exit(2)

def check_copyright():
    # Run the git command that gets the filenames of every file that has been
    # locally modified since the last commit.
    print "Running pre-commit hook"
    sub = Popen("git diff --staged --name-only HEAD".split(), stdout=PIPE)
    sub.wait()

    all_files_changed = [file
                         for file in [f.strip() for f in sub.stdout.readlines()]
                         if os.path.exists(file)]

    failed_files = []
    for filename in all_files_changed:
        if not FILENAME_RE.match(filename):
            continue
        with open(filename) as infile:
            slurp = infile.read()
        if not COPYRIGHT_RE.search(slurp):
            print "%s not contained in %s" % (COPYRIGHT_RE, slurp)
            failed_files.append((filename, ("Needs a copyright statement including %s.  E.g.\n"
                "    # Copyright (c) Metaswitch Networks %s-%s. All rights reserved.") %
                (THIS_YEAR, THIS_YEAR, THIS_YEAR)))
        if FORBIDDEN_RE.search(slurp):
            num = 1
            bad_lines = ""
            for line in slurp.split("\n"):
                for regex, description in FORBIDDEN_RES:
                    if re.compile(regex).search(line):
                        bad_lines += "\n    Line %s %s %r" % (num, description, line)
                num += 1
            failed_files.append((filename, "Contains strings matching the forbidden pattern%s" % (bad_lines)))


    if len(failed_files) > 0:
        print "The following files had problems"
        for filename in failed_files:
            print "  %s %s" % filename
        print "(Use 'git commit --no-verify' to bypass this check)"
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
